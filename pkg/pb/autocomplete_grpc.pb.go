// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CompleterClient is the client API for Completer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompleterClient interface {
	// Sends a greeting
	Complete(ctx context.Context, in *WordRequest, opts ...grpc.CallOption) (*WordsReply, error)
}

type completerClient struct {
	cc grpc.ClientConnInterface
}

func NewCompleterClient(cc grpc.ClientConnInterface) CompleterClient {
	return &completerClient{cc}
}

func (c *completerClient) Complete(ctx context.Context, in *WordRequest, opts ...grpc.CallOption) (*WordsReply, error) {
	out := new(WordsReply)
	err := c.cc.Invoke(ctx, "/pb.Completer/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompleterServer is the server API for Completer service.
// All implementations must embed UnimplementedCompleterServer
// for forward compatibility
type CompleterServer interface {
	// Sends a greeting
	Complete(context.Context, *WordRequest) (*WordsReply, error)
	mustEmbedUnimplementedCompleterServer()
}

// UnimplementedCompleterServer must be embedded to have forward compatible implementations.
type UnimplementedCompleterServer struct {
}

func (*UnimplementedCompleterServer) Complete(context.Context, *WordRequest) (*WordsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (*UnimplementedCompleterServer) mustEmbedUnimplementedCompleterServer() {}

func RegisterCompleterServer(s *grpc.Server, srv CompleterServer) {
	s.RegisterService(&_Completer_serviceDesc, srv)
}

func _Completer_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompleterServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Completer/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompleterServer).Complete(ctx, req.(*WordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Completer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Completer",
	HandlerType: (*CompleterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _Completer_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autocomplete.proto",
}
